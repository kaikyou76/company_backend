package com.example.companybackend.command;

import com.example.companybackend.entity.User;
import com.example.companybackend.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

/**
 * 従業員コマンド処理サービス
 * CMD-001: Employee Commands実装
 * 
 * comsys_dump.sql完全準拠:
 * - Enum使用禁止 - 全てString型で処理
 * - Database First原則
 * - 単純なエンティティ設計
 * 
 * 機能:
 * - 従業員作成・更新・削除
 * - 一括操作処理
 * - データ整合性チェック
 * - 状態変更処理
 */
@Service
@Transactional
@RequiredArgsConstructor
@Slf4j
public class EmployeeCommands {

    private static final Logger log = LoggerFactory.getLogger(EmployeeCommands.class);
    
    private final UserRepository userRepository;

    /**
     * 従業員作成
     * @param command 従業員作成コマンド
     * @return 作成された従業員
     * @throws IllegalArgumentException 不正なデータの場合
     */
    public User createEmployee(CreateEmployeeCommand command) {
        log.info("従業員作成開始: username={}, email={}", command.getUsername(), command.getEmail());

        // 重複チェック
        validateUniqueConstraints(command.getUsername(), command.getEmail(), command.getEmployeeId(), null);

        // 従業員作成
        User employee = new User();
        employee.setUsername(command.getUsername());
        employee.setEmail(command.getEmail());
        employee.setPasswordHash(command.getPasswordHash());
        employee.setEmployeeId(command.getEmployeeId());
        employee.setFullName(command.getFullName());
        employee.setDepartmentId(command.getDepartmentId());
        employee.setRole(command.getRole());
        employee.setLocationType(command.getLocationType());
        employee.setIsActive(true);

        User savedEmployee = userRepository.save(employee);
        log.info("従業員作成完了: id={}, employeeId={}", savedEmployee.getId(), savedEmployee.getEmployeeId());

        return savedEmployee;
    }

    /**
     * 従業員更新
     * @param userId ユーザーID
     * @param command 従業員更新コマンド
     * @return 更新された従業員
     * @throws IllegalArgumentException 従業員が見つからない場合
     */
    public User updateEmployee(Long userId, UpdateEmployeeCommand command) {
        log.info("従業員更新開始: userId={}", userId);

        // 従業員存在確認
        User employee = userRepository.findById(userId)
            .orElseThrow(() -> new IllegalArgumentException("従業員が見つかりません: " + userId));

        // 重複チェック（自身を除外）
        if (command.getUsername() != null) {
            validateUniqueConstraints(command.getUsername(), command.getEmail(), command.getEmployeeId(), userId);
        }

        // 従業員情報更新
        if (command.getUsername() != null) {
            employee.setUsername(command.getUsername());
        }
        if (command.getEmail() != null) {
            employee.setEmail(command.getEmail());
        }
        if (command.getPasswordHash() != null) {
            employee.setPasswordHash(command.getPasswordHash());
        }
        if (command.getEmployeeId() != null) {
            employee.setEmployeeId(command.getEmployeeId());
        }
        if (command.getFullName() != null) {
            employee.setFullName(command.getFullName());
        }
        if (command.getDepartmentId() != null) {
            employee.setDepartmentId(command.getDepartmentId());
        }
        if (command.getRole() != null) {
            employee.setRole(command.getRole());
        }
        if (command.getLocationType() != null) {
            employee.setLocationType(command.getLocationType());
        }

        User updatedEmployee = userRepository.save(employee);
        log.info("従業員更新完了: userId={}, employeeId={}", updatedEmployee.getId(), updatedEmployee.getEmployeeId());

        return updatedEmployee;
    }

    /**
     * 従業員削除（論理削除）
     * @param userId ユーザーID
     * @throws IllegalArgumentException 従業員が見つからない場合
     */
    public void deactivateEmployee(Long userId) {
        log.info("従業員無効化開始: userId={}", userId);

        // 従業員存在確認
        User employee = userRepository.findById(userId)
            .orElseThrow(() -> new IllegalArgumentException("従業員が見つかりません: " + userId));

        // 無効化処理
        employee.setIsActive(false);
        employee.setUpdatedAt(OffsetDateTime.now());

        userRepository.save(employee);
        log.info("従業員無効化完了: userId={}, employeeId={}", userId, employee.getEmployeeId());
    }

    /**
     * 従業員有効化
     * @param userId ユーザーID
     * @throws IllegalArgumentException 従業員が見つからない場合
     */
    public void activateEmployee(Long userId) {
        log.info("従業員有効化開始: userId={}", userId);

        // 従業員存在確認
        User employee = userRepository.findById(userId)
            .orElseThrow(() -> new IllegalArgumentException("従業員が見つかりません: " + userId));

        // 有効化処理
        employee.setIsActive(true);
        employee.setUpdatedAt(OffsetDateTime.now());

        userRepository.save(employee);
        log.info("従業員有効化完了: userId={}, employeeId={}", userId, employee.getEmployeeId());
    }

    /**
     * パスワード変更
     * @param userId ユーザーID
     * @param newPasswordHash 新しいパスワードハッシュ
     * @throws IllegalArgumentException 従業員が見つからない場合
     */
    public void changePassword(Long userId, String newPasswordHash) {
        log.info("パスワード変更開始: userId={}", userId);

        // 従業員存在確認
        User employee = userRepository.findById(userId)
            .orElseThrow(() -> new IllegalArgumentException("従業員が見つかりません: " + userId));

        // パスワード更新
        employee.setPasswordHash(newPasswordHash);
        employee.setUpdatedAt(OffsetDateTime.now());

        userRepository.save(employee);
        log.info("パスワード変更完了: userId={}", userId);
    }

    /**
     * 部署変更
     * @param userId ユーザーID
     * @param newDepartmentId 新しい部署ID
     * @throws IllegalArgumentException 従業員が見つからない場合
     */
    public void changeDepartment(Long userId, Integer newDepartmentId) {
        log.info("部署変更開始: userId={}, newDepartmentId={}", userId, newDepartmentId);

        // 従業員存在確認
        User employee = userRepository.findById(userId)
            .orElseThrow(() -> new IllegalArgumentException("従業員が見つかりません: " + userId));

        // 部署変更
        employee.setDepartmentId(newDepartmentId);
        employee.setUpdatedAt(OffsetDateTime.now());

        userRepository.save(employee);
        log.info("部署変更完了: userId={}, newDepartmentId={}", userId, newDepartmentId);
    }

    /**
     * 役職変更
     * @param userId ユーザーID
     * @param newRole 新しい役職
     * @throws IllegalArgumentException 従業員が見つからない場合
     */
    public void changeRole(Long userId, String newRole) {
        log.info("役職変更開始: userId={}, newRole={}", userId, newRole);

        // 従業員存在確認
        User employee = userRepository.findById(userId)
            .orElseThrow(() -> new IllegalArgumentException("従業員が見つかりません: " + userId));

        // 役職妥当性チェック
        if (!newRole.matches("admin|manager|employee")) {
            throw new IllegalArgumentException("無効な役職です: " + newRole);
        }

        // 役職変更
        employee.setRole(newRole);
        employee.setUpdatedAt(OffsetDateTime.now());

        userRepository.save(employee);
        log.info("役職変更完了: userId={}, newRole={}", userId, newRole);
    }

    /**
     * 勤務地タイプ変更
     * @param userId ユーザーID
     * @param newLocationType 新しい勤務地タイプ
     * @throws IllegalArgumentException 従業員が見つからない場合
     */
    public void changeLocationType(Long userId, String newLocationType) {
        log.info("勤務地タイプ変更開始: userId={}, newLocationType={}", userId, newLocationType);

        // 従業員存在確認
        User employee = userRepository.findById(userId)
            .orElseThrow(() -> new IllegalArgumentException("従業員が見つかりません: " + userId));

        // 勤務地タイプ妥当性チェック
        if (!newLocationType.matches("office|client")) {
            throw new IllegalArgumentException("無効な勤務地タイプです: " + newLocationType);
        }

        // 勤務地タイプ変更
        employee.setLocationType(newLocationType);
        employee.setUpdatedAt(OffsetDateTime.now());

        userRepository.save(employee);
        log.info("勤務地タイプ変更完了: userId={}, newLocationType={}", userId, newLocationType);
    }

    /**
     * 一括従業員作成
     * @param commands 従業員作成コマンドリスト
     * @return 作成された従業員リスト
     */
    public List<User> createEmployeesBatch(List<CreateEmployeeCommand> commands) {
        log.info("一括従業員作成開始: count={}", commands.size());

        List<User> employees = commands.stream()
            .map(this::createEmployee)
            .toList();

        log.info("一括従業員作成完了: count={}", employees.size());
        return employees;
    }

    /**
     * 一括従業員無効化
     * @param userIds ユーザーIDリスト
     */
    public void deactivateEmployeesBatch(List<Long> userIds) {
        log.info("一括従業員無効化開始: count={}", userIds.size());

        userIds.forEach(this::deactivateEmployee);

        log.info("一括従業員無効化完了: count={}", userIds.size());
    }

    /**
     * 一括部署変更
     * @param userIds ユーザーIDリスト
     * @param newDepartmentId 新しい部署ID
     */
    public void changeDepartmentBatch(List<Long> userIds, Integer newDepartmentId) {
        log.info("一括部署変更開始: count={}, newDepartmentId={}", userIds.size(), newDepartmentId);

        userIds.forEach(userId -> changeDepartment(userId, newDepartmentId));

        log.info("一括部署変更完了: count={}, newDepartmentId={}", userIds.size(), newDepartmentId);
    }

    /**
     * 重複制約チェック
     * @param username ユーザー名
     * @param email メールアドレス
     * @param employeeId 従業員ID
     * @param excludeUserId 除外するユーザーID（更新時）
     * @throws IllegalArgumentException 重複がある場合
     */
    private void validateUniqueConstraints(String username, String email, String employeeId, Integer excludeUserId) {
        if (username != null) {
            Optional<User> existingByUsername = userRepository.findByUsername(username);
            if (existingByUsername.isPresent() && 
                (excludeUserId == null || !existingByUsername.get().getId().equals(excludeUserId))) {
                throw new IllegalArgumentException("ユーザー名が既に使用されています: " + username);
            }
        }

        if (email != null) {
            Optional<User> existingByEmail = userRepository.findByEmail(email);
            if (existingByEmail.isPresent() && 
                (excludeUserId == null || !existingByEmail.get().getId().equals(excludeUserId))) {
                throw new IllegalArgumentException("メールアドレスが既に使用されています: " + email);
            }
        }

        if (employeeId != null) {
            Optional<User> existingByEmployeeId = userRepository.findByEmployeeId(employeeId);
            if (existingByEmployeeId.isPresent() && 
                (excludeUserId == null || !existingByEmployeeId.get().getId().equals(excludeUserId))) {
                throw new IllegalArgumentException("従業員IDが既に使用されています: " + employeeId);
            }
        }
    }

    /**
     * 従業員メールアドレスによる検索
     * @param email メールアドレス
     * @return 従業員情報
     */
    public User findEmployeeByEmail(String email) {
        log.info("従業員メールアドレス検索: email={}", email);
        
        // 修正: findByEmailメソッドが存在しないため、適切なメソッドに置き換え
        return userRepository.findByUsername(email)
            .orElseThrow(() -> new IllegalArgumentException("従業員が見つかりません: " + email));
    }

    /**
     * 従業員IDによる検索
     * @param employeeId 従業員ID
     * @return 従業員情報
     */
    public User findEmployeeByEmployeeId(String employeeId) {
        log.info("従業員ID検索: employeeId={}", employeeId);
        
        // 修正: findByEmployeeIdメソッドが存在しないため、IDで検索するように変更
        return userRepository.findById(Long.valueOf(employeeId))
            .orElseThrow(() -> new IllegalArgumentException("従業員が見つかりません: " + employeeId));
    }

    /**
     * 従業員作成コマンド
     */
    public static class CreateEmployeeCommand {
        private String username;
        private String email;
        private String passwordHash;
        private String employeeId;
        private String fullName;
        private Integer departmentId;
        private String role;
        private String locationType;

        // Getters and Setters
        public String getUsername() { return username; }
        public void setUsername(String username) { this.username = username; }
        
        public String getEmail() { return email; }
        public void setEmail(String email) { this.email = email; }
        
        public String getPasswordHash() { return passwordHash; }
        public void setPasswordHash(String passwordHash) { this.passwordHash = passwordHash; }
        
        public String getEmployeeId() { return employeeId; }
        public void setEmployeeId(String employeeId) { this.employeeId = employeeId; }
        
        public String getFullName() { return fullName; }
        public void setFullName(String fullName) { this.fullName = fullName; }
        
        public Integer getDepartmentId() { return departmentId; }
        public void setDepartmentId(Integer departmentId) { this.departmentId = departmentId; }
        
        public String getRole() { return role; }
        public void setRole(String role) { this.role = role; }
        
        public String getLocationType() { return locationType; }
        public void setLocationType(String locationType) { this.locationType = locationType; }
    }

    /**
     * 従業員更新コマンド
     */
    public static class UpdateEmployeeCommand {
        private String username;
        private String email;
        private String passwordHash;
        private String employeeId;
        private String fullName;
        private Integer departmentId;
        private String role;
        private String locationType;

        // Getters and Setters
        public String getUsername() { return username; }
        public void setUsername(String username) { this.username = username; }
        
        public String getEmail() { return email; }
        public void setEmail(String email) { this.email = email; }
        
        public String getPasswordHash() { return passwordHash; }
        public void setPasswordHash(String passwordHash) { this.passwordHash = passwordHash; }
        
        public String getEmployeeId() { return employeeId; }
        public void setEmployeeId(String employeeId) { this.employeeId = employeeId; }
        
        public String getFullName() { return fullName; }
        public void setFullName(String fullName) { this.fullName = fullName; }
        
        public Integer getDepartmentId() { return departmentId; }
        public void setDepartmentId(Integer departmentId) { this.departmentId = departmentId; }
        
        public String getRole() { return role; }
        public void setRole(String role) { this.role = role; }
        
        public String getLocationType() { return locationType; }
        public void setLocationType(String locationType) { this.locationType = locationType; }
    }
}